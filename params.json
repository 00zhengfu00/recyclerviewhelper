{
  "name": "Recyclerviewhelper",
  "tagline": "Android library that provides the most common functions around recycler view like Swipe to dismiss, Drag and Drop, Divider in the ui, events for when item selected and when not selected, on-click listener for items.",
  "body": "# RecyclerViewHelper\r\n\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.nisrulz/recyclerviewhelper/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.github.nisrulz/recyclerviewhelper)  [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-RecyclerViewHelper-green.svg?style=true)](https://android-arsenal.com/details/1/3572)\r\n\r\n[![Twitter Follow](https://img.shields.io/twitter/follow/nisrulz.svg?style=social)](https://twitter.com/nisrulz)\r\n\r\nRecyclerViewHelper provides the most common functions around recycler view like Swipe\r\n to dismiss, Drag and Drop, Divider in the ui, events for when item selected and when not \r\n selected, on-click listener for items.\r\n\r\n#Integration\r\n- RecyclerViewHelper is available in the MavenCentral, so getting it as simple as adding it as a dependency\r\n```gradle\r\ncompile 'com.github.nisrulz:recyclerviewhelper:23.4.0'\r\n```\r\n> NOTE : The version here corresponds to the version of underlying recyclerview dependency. \r\n\r\n#Usage\r\n+ Implement the `RHVAdapter` in your recycler view adapter and `RHVViewHolder` in your ItemViewHolder \r\n```java\r\n\r\n    public class MyAdapter extends RecyclerView.Adapter<MyAdapter.ItemViewHolder> implements RVHAdapter {\r\n    \r\n         ...\r\n    \r\n        @Override\r\n        public boolean onItemMove(int fromPosition, int toPosition) {\r\n            swap(fromPosition, toPosition);\r\n            return false;\r\n        }\r\n    \r\n        @Override\r\n        public void onItemDismiss(int position, int direction) {\r\n            remove(position);\r\n        }\r\n    \r\n        public class ItemViewHolder extends RecyclerView.ViewHolder implements RVHViewHolder {\r\n            ...\r\n               \r\n            @Override\r\n            public void onItemSelected(int actionstate) {\r\n                System.out.println(\"Item is selected\");\r\n            }\r\n    \r\n            @Override\r\n            public void onItemClear() {\r\n                System.out.println(\"Item is unselected\");\r\n    \r\n            }\r\n        }\r\n    \r\n        // Helper functions you might want to implement to make changes in the list as an event is fired\r\n        private void remove(int position) {\r\n            dataList.remove(position);\r\n            notifyItemRemoved(position);\r\n        }\r\n    \r\n        private void swap(int firstPosition, int secondPosition) {\r\n            Collections.swap(dataList, firstPosition, secondPosition);\r\n            notifyItemMoved(firstPosition, secondPosition);\r\n        }\r\n    }\r\n\r\n```\r\n\r\n+ Then implement your recycler view\r\n```java\r\n\r\n   public class MainActivity extends AppCompatActivity {\r\n   \r\n   \r\n       RecyclerView myrecyclerview;\r\n       ArrayList<String> data;\r\n       MyAdapter adapter;\r\n   \r\n       @Override\r\n       protected void onCreate(Bundle savedInstanceState) {\r\n           super.onCreate(savedInstanceState);\r\n           setContentView(R.layout.activity_main);\r\n   \r\n           myrecyclerview = (RecyclerView) findViewById(R.id.rv_fruits);\r\n   \r\n           data = new ArrayList<>();\r\n           data.add(\"Apple\");\r\n           ...\r\n           data.add(\"Fig\");\r\n   \r\n           // Setup your adapter\r\n           adapter = new MyAdapter(data);\r\n           // Setup \r\n           myrecyclerview.hasFixedSize();\r\n           myrecyclerview.setLayoutManager(new LinearLayoutManager(this));\r\n           myrecyclerview.setAdapter(adapter);\r\n   \r\n   \r\n           // Setup onItemTouchHandler to enable drag and drop , swipe left or right\r\n           ItemTouchHelper.Callback callback = new RVHItemTouchHelperCallback(adapter, true, true,\r\n                   true);\r\n           ItemTouchHelper helper = new ItemTouchHelper(callback);\r\n           helper.attachToRecyclerView(myrecyclerview);\r\n   \r\n           // Set the divider in the recyclerview\r\n           myrecyclerview.addItemDecoration(new RVHItemDividerDecoration(this, LinearLayoutManager.VERTICAL));\r\n   \r\n           // Set On Click Listener\r\n           myrecyclerview.addOnItemTouchListener(new RVHItemClickListener(this, new RVHItemClickListener.OnItemClickListener() {\r\n               @Override\r\n               public void onItemClick(View view, int position) {\r\n                   String value = \"Clicked Item \" + data.get(position) + \" at \" + position;\r\n   \r\n                   Log.d(\"TAG\", value);\r\n                   Toast.makeText(MainActivity.this, value, Toast.LENGTH_SHORT).show();\r\n               }\r\n           }));\r\n   \r\n       }\r\n   }\r\n\r\n\r\n```\r\n\r\n--\r\n\r\nSpecial Credits to Paul Burke and his [article](https://medium\r\n.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf#.bk2e4q81b) which got me thinking \r\n\r\nThis library contains a modified version of his implementations of ItemTouchHelper.\r\n\r\nLicense\r\n=======\r\n\r\n    Copyright 2016 Nishant Srivastava\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}